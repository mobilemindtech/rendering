import java.time.Instant
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/restricted" }
        maven {
            url = 'https://repository.apache.org/content/groups/snapshots'
            content {
                includeVersionByRegex('org[.]apache[.](grails|groovy).*', '.*', '.*-SNAPSHOT')
            }
        }
        mavenLocal()
    }
    dependencies {
        classpath platform("org.apache.grails:grails-bom:$grailsVersion")
        classpath "org.apache.grails:grails-gradle-plugins"
    }
}

version = projectVersion
group "org.grails.plugins"

apply plugin: 'maven-publish'
apply plugin:"org.apache.grails.gradle.grails-plugin"
apply plugin:"org.apache.grails.gradle.grails-gsp"
apply plugin: 'org.apache.grails.gradle.grails-publish'
apply plugin: 'java-library'

ext {
    buildInstant = java.util.Optional.ofNullable(System.getenv("SOURCE_DATE_EPOCH"))
            .filter(s -> !s.isEmpty())
            .map(Long::parseLong)
            .map(Instant::ofEpochSecond)
            .orElseGet(Instant::now) as Instant
    formattedBuildDate = DateTimeFormatter.ISO_INSTANT.format(buildInstant)
    buildDate = buildInstant.atZone(ZoneOffset.UTC) // for reproducible builds
}

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/restricted" }
    maven {
        url = 'https://repository.apache.org/content/groups/snapshots'
        content {
            includeVersionByRegex('org[.]apache[.](grails|groovy).*', '.*', '.*-SNAPSHOT')
        }
    }
    mavenLocal()
}

dependencies {
    compileOnly platform("org.apache.grails:grails-bom:$grailsVersion")
    compileOnly 'org.apache.grails:grails-dependencies-starter-web'

    api 'org.xhtmlrenderer:flying-saucer-pdf-openpdf:9.1.22'
    api("org.apache.pdfbox:pdfbox:3.0.5") 

    testImplementation platform("org.apache.grails:grails-bom:$grailsVersion")
    testImplementation "org.apache.grails:grails-testing-support-datamapping"
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.apache.grails:grails-testing-support-web"


}

compileJava.options.release = 17

jar {
  exclude "RenderingController**"
  exclude "application.groovy"
  exclude "*.gsp"
  exclude "*.data"
  exclude "gsp_*"
  exclude "gsp/*"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

groovydoc {
    excludes = ['**/*GrailsPlugin.groovy', '**/Application.groovy']
}

grailsPublish {
    githubSlug = 'gpc/rendering'
    license {
        name = 'Apache-2.0'
    }
    title = 'Rendering Plugin'
    desc = 'Render GSPs as PDFs, JPEGs, GIFs and PNGs'
    developers = [
            ldaley      : "Luke Daley",
            graemerocher: "Graeme Rocher",
            burtbeckwith: "Burt Beckwith",
            sbglasius   : "SÃ¸ren Berg Glasius",
            magx2       : "Martin",
            Ari651      : "Ari Bustamante",
            billgonemad : "William Malinowski",
            ZacharyKlein: "Zachary Klein",
            halfbaked   : "Eamonn O'Connell",
            codeconsole : "Scott Murphy",
    ]
}

compileJava.options.release = javaVersion.toInteger()

apply from: layout.projectDirectory.file('gradle/docs-config.gradle')
